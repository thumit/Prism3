---------------------------------------------------------LOGIC CHECK-------------------------------------------------------

----------
1.0. Check existing_strata for duplication
SELECT  
COUNT (strata_id) as total_strata, 
COUNT (DISTINCT strata_id) as total_unique_strata,
CASE WHEN COUNT (strata_id) = COUNT (DISTINCT strata_id) THEN 'none - data is good' ELSE 'review - duplicated strata exist' end AS recommended_action
FROM  
(SELECT (layer1 || layer2 || layer3 || layer4 || layer5 || layer6) as strata_id FROM existing_strata)
----------
1.1. List all duplicated existing_strata
SELECT 
(layer1 || layer2 || layer3 || layer4 || layer5 || layer6) as strata_id, layer1, layer2, layer3, layer4, layer5, layer6, COUNT(*) as count
FROM existing_strata
GROUP BY strata_id HAVING COUNT(*) > 1
----------
----------------------------------------------------EVEN AGE ROTATION------------------------------------------------

----------
2.0. Rotation age ranges for EA_E by cover type & size class
SELECT 
SUBSTR(pres, 1, INSTR(pres, '_')-1) as e_covertype,
SUBSTR(pres, INSTR(pres, '_')+1, INSTR(SUBSTR(pres, INSTR(pres, '_')+1), '_')-1) as e_sizeclass,
MIN(CAST(rotation_age as decimal)) AS e_min_rotation_age, 
MAX(CAST(rotation_age as decimal)) AS e_max_rotation_age
FROM 

(SELECT DISTINCT prescription AS pres, 
action_type AS final_activity, 
MAX(CAST(age_class as decimal)) AS rotation_age
FROM yield_tables WHERE prescription LIKE '%\_EA\_E\_%' ESCAPE '\' GROUP BY prescription)

GROUP BY e_covertype, e_sizeclass
----------
2.1. Rotation age ranges for EA_E by cover type
SELECT 
SUBSTR(pres, 1, INSTR(pres, '_')-1) as e_covertype,
MIN(CAST(rotation_age as decimal)) AS e_min_rotation_age, 
MAX(CAST(rotation_age as decimal)) AS e_max_rotation_age
FROM 

(SELECT DISTINCT prescription AS pres, 
action_type AS final_activity, 
MAX(CAST(age_class as decimal)) AS rotation_age
FROM yield_tables WHERE prescription LIKE '%\_EA\_E\_%' ESCAPE '\' GROUP BY prescription)

GROUP BY e_covertype
----------
2.2. Rotation age ranges for EA_R by cover type
SELECT 
SUBSTR(pres, 1, INSTR(pres, '_')-1) as r_covertype,
MIN(CAST(rotation_age as decimal)) AS r_min_rotation_age, 
MAX(CAST(rotation_age as decimal)) AS r_max_rotation_age
FROM 

(SELECT DISTINCT prescription AS pres, 
action_type AS final_activity, 
MAX(CAST(age_class as decimal)) AS rotation_age
FROM yield_tables WHERE prescription LIKE '%\_EA\_R\_%' ESCAPE '\' GROUP BY prescription)

GROUP BY r_covertype
----------
2.3. Rotation age ranges for EA_E and EA_R by cover type (full outer join of 2.1 & 2.2)
SELECT
e_table.e_covertype AS covertype,
e_table.e_min_rotation_age,
e_table.e_max_rotation_age,
r_table.r_min_rotation_age,
r_table.r_max_rotation_age
FROM
(




(SELECT
SUBSTR(EA_E_prescription, 1, INSTR(EA_E_prescription, "_")-1) AS e_covertype,
MIN(CAST(rotation_age as decimal)) AS e_min_rotation_age, 
MAX(CAST(rotation_age as decimal)) AS e_max_rotation_age
FROM 

(SELECT DISTINCT prescription AS EA_E_prescription, 
action_type AS final_activity, 
MAX(CAST(age_class as decimal)) AS rotation_age
FROM yield_tables WHERE prescription LIKE '%\_EA\_E\_%' ESCAPE '\' GROUP BY prescription)

GROUP BY e_covertype) AS e_table


LEFT JOIN


(SELECT
SUBSTR(EA_R_prescription, 1, INSTR(EA_R_prescription, "_")-1) AS r_covertype,
MIN(CAST(rotation_age as decimal)) AS r_min_rotation_age, 
MAX(CAST(rotation_age as decimal)) AS r_max_rotation_age
FROM 

(SELECT DISTINCT prescription AS EA_R_prescription, 
action_type AS final_activity, 
MAX(CAST(age_class as decimal)) AS rotation_age
FROM yield_tables WHERE prescription LIKE '%\_EA\_R\_%' ESCAPE '\' GROUP BY prescription)

GROUP BY r_covertype) AS r_table


ON e_table.e_covertype = r_table.r_covertype)





UNION ALL





SELECT
r_table.r_covertype,
e_table.e_min_rotation_age,
e_table.e_max_rotation_age,
r_table.r_min_rotation_age,
r_table.r_max_rotation_age
FROM
(


(SELECT
SUBSTR(EA_R_prescription, 1, INSTR(EA_R_prescription, "_")-1) AS r_covertype,
MIN(CAST(rotation_age as decimal)) AS r_min_rotation_age, 
MAX(CAST(rotation_age as decimal)) AS r_max_rotation_age
FROM 

(SELECT DISTINCT prescription AS EA_R_prescription, 
action_type AS final_activity, 
MAX(CAST(age_class as decimal)) AS rotation_age
FROM yield_tables WHERE prescription LIKE '%\_EA\_R\_%' ESCAPE '\' GROUP BY prescription)

GROUP BY r_covertype) AS r_table


LEFT JOIN


(SELECT
SUBSTR(EA_E_prescription, 1, INSTR(EA_E_prescription, "_")-1) AS e_covertype,
MIN(CAST(rotation_age as decimal)) AS e_min_rotation_age, 
MAX(CAST(rotation_age as decimal)) AS e_max_rotation_age
FROM 

(SELECT DISTINCT prescription AS EA_E_prescription, 
action_type AS final_activity, 
MAX(CAST(age_class as decimal)) AS rotation_age
FROM yield_tables WHERE prescription LIKE '%\_EA\_E\_%' ESCAPE '\' GROUP BY prescription)

GROUP BY e_covertype) AS e_table


ON e_table.e_covertype = r_table.r_covertype)





WHERE  e_table.e_covertype IS NULL
----------
---------------------------------------------------PRESCRIPTION COUNT-----------------------------------------------

----------
3.0. Count total number of prescriptions by silviculture method & cover type
SELECT
SUBSTR(DISTINCT prescription, 1, INSTR(DISTINCT prescription, "_")-1) as CoverType,
SUM(case when prescription LIKE '%\_NG\_E\_%' ESCAPE '\' then 1 else 0 end) NG_E,
SUM(case when prescription LIKE '%\_NG\_R\_%' ESCAPE '\' then 1 else 0 end) NG_R,
SUM(case when prescription LIKE '%\_PB\_E\_%' ESCAPE '\' then 1 else 0 end) PB_E,
SUM(case when prescription LIKE '%\_PB\_R\_%' ESCAPE '\' then 1 else 0 end) PB_R,
SUM(case when prescription LIKE '%\_GS\_E\_%' ESCAPE '\' then 1 else 0 end) GS_E,
SUM(case when prescription LIKE '%\_GS\_R\_%' ESCAPE '\' then 1 else 0 end) GS_R,
SUM(case when prescription LIKE '%\_EA\_E\_%' ESCAPE '\' then 1 else 0 end) EA_E,
SUM(case when prescription LIKE '%\_EA\_R\_%' ESCAPE '\' then 1 else 0 end) EA_R,
SUM(case when prescription LIKE '%\_MS\_E\_%' ESCAPE '\' then 1 else 0 end) MS_E,
SUM(case when prescription LIKE '%\_BS\_E\_%' ESCAPE '\' then 1 else 0 end) BS_E,
SUM(case when prescription LIKE '%%' then 1 else 0 end) Total_Prescriptions
FROM (SELECT DISTINCT prescription FROM yield_tables)
GROUP BY CoverType

UNION ALL

SELECT
'Total_Prescriptions' as CoverType2,
SUM(case when prescription LIKE '%\_NG\_E\_%' ESCAPE '\' then 1 else 0 end) NG_E,
SUM(case when prescription LIKE '%\_NG\_R\_%' ESCAPE '\' then 1 else 0 end) NG_R,
SUM(case when prescription LIKE '%\_PB\_E\_%' ESCAPE '\' then 1 else 0 end) PB_E,
SUM(case when prescription LIKE '%\_PB\_R\_%' ESCAPE '\' then 1 else 0 end) PB_R,
SUM(case when prescription LIKE '%\_GS\_E\_%' ESCAPE '\' then 1 else 0 end) GS_E,
SUM(case when prescription LIKE '%\_GS\_R\_%' ESCAPE '\' then 1 else 0 end) GS_R,
SUM(case when prescription LIKE '%\_EA\_E\_%' ESCAPE '\' then 1 else 0 end) EA_E,
SUM(case when prescription LIKE '%\_EA\_R\_%' ESCAPE '\' then 1 else 0 end) EA_R,
SUM(case when prescription LIKE '%\_MS\_E\_%' ESCAPE '\' then 1 else 0 end) MS_E,
SUM(case when prescription LIKE '%\_BS\_E\_%' ESCAPE '\' then 1 else 0 end) BS_E,
SUM(case when prescription LIKE '%%' then 1 else 0 end) Total_Prescriptions
FROM (SELECT DISTINCT prescription FROM yield_tables)
----------
3.1. Count total number of "existing" prescriptions by silviculture method, cover type, size class
SELECT
Covertype,
Sizeclass,
SUM(case when Method = 'NG' AND Status = 'E' then 1 else 0 end) NG_E,
SUM(case when Method = 'PB' AND Status = 'E' then 1 else 0 end) PB_E,
SUM(case when Method = 'GS' AND Status = 'E' then 1 else 0 end) GS_E,
SUM(case when Method = 'EA' AND Status = 'E' then 1 else 0 end) EA_E,
SUM(case when Method = 'MS' AND Status = 'E' then 1 else 0 end) MS_E,
SUM(case when Method = 'BS' AND Status = 'E' then 1 else 0 end) BS_E,
SUM(case when Status = 'E' then 1 else 0 end) Total_Prescriptions
FROM



(
SELECT
Covertype,
Sizeclass,
Method,
SUBSTR(Leftover, 1, INSTR(Leftover, '_')-1) as Status,
SUBSTR(Leftover, INSTR(Leftover, '_')+1) as Leftover
FROM

(
SELECT
Covertype,
Sizeclass,
SUBSTR(Leftover, 1, INSTR(Leftover, '_')-1) as Method,
SUBSTR(Leftover, INSTR(Leftover, '_')+1) as Leftover
FROM

(
SELECT
Covertype,
SUBSTR(Leftover, 1, INSTR(Leftover, '_')-1) as Sizeclass,
SUBSTR(Leftover, INSTR(Leftover, '_')+1) as Leftover
FROM

(
SELECT 
SUBSTR(pres, 1, INSTR(pres, '_')-1) as Covertype,
SUBSTR(pres, INSTR(pres, '_')+1) as Leftover
FROM
(SELECT DISTINCT prescription  as pres FROM yield_tables
WHERE prescription LIKE '%\_NG\_E\_%' ESCAPE '\' 
OR prescription LIKE '%\_PB\_E\_%' ESCAPE '\' 
OR prescription LIKE '%\_GS\_E\_%' ESCAPE '\' 
OR prescription LIKE '%\_EA\_E\_%' ESCAPE '\' 
OR  prescription LIKE '%\_MS\_E\_%' ESCAPE '\' 
OR prescription LIKE '%\_BS\_E\_%' ESCAPE '\')
)
)
)
)



GROUP BY
Covertype,
Sizeclass
----------
-----------------------------------------------------PRESCRIPTION LIST-------------------------------------------------

----------
4.0. List all prescriptions
SELECT DISTINCT prescription, action_type AS final_activity, MIN(CAST(age_class as decimal)) AS min_age_class, MAX(CAST(age_class as decimal)) AS max_age_class, COUNT(action_type) AS total_rows
FROM yield_tables GROUP BY prescription;
----------
4.1. List "Natural Growth Existing" prescriptions
SELECT DISTINCT prescription AS NG_E_prescription, action_type AS final_activity, MIN(CAST(age_class as decimal)) AS min_age_class, MAX(CAST(age_class as decimal)) AS max_age_class, COUNT(action_type) AS total_rows
FROM yield_tables WHERE prescription LIKE '%\_NG\_E\_%' ESCAPE '\' GROUP BY prescription;
----------
4.2. List "Natural Growth Regeneration" prescriptions
SELECT DISTINCT prescription AS NG_R_prescription, action_type AS final_activity, MIN(CAST(age_class as decimal)) AS min_age_class, MAX(CAST(age_class as decimal)) AS max_age_class, COUNT(action_type) AS total_rows
FROM yield_tables WHERE prescription LIKE '%\_NG\_R\_%' ESCAPE '\' GROUP BY prescription;
----------
4.3. List "Prescribed Burn Existing" prescriptions
SELECT DISTINCT prescription AS PB_E_prescription, action_type AS final_activity, MIN(CAST(age_class as decimal)) AS min_age_class, MAX(CAST(age_class as decimal)) AS max_age_class, COUNT(action_type) AS total_rows
FROM yield_tables WHERE prescription LIKE '%\_PB\_E\_%' ESCAPE '\' GROUP BY prescription;
----------
4.4. List "Prescribed Burn Regeneration" prescriptions
SELECT DISTINCT prescription AS PB_R_prescription, action_type AS final_activity, MIN(CAST(age_class as decimal)) AS min_age_class, MAX(CAST(age_class as decimal)) AS max_age_class, COUNT(action_type) AS total_rows
FROM yield_tables WHERE prescription LIKE '%\_PB\_R\_%' ESCAPE '\' GROUP BY prescription;
----------
4.5. List "Group Selection Existing" prescriptions
SELECT DISTINCT prescription AS GS_E_prescription, action_type AS final_activity, MIN(CAST(age_class as decimal)) AS min_age_class, MAX(CAST(age_class as decimal)) AS max_age_class, COUNT(action_type) AS total_rows
FROM yield_tables WHERE prescription LIKE '%\_GS\_E\_%' ESCAPE '\' GROUP BY prescription;
----------
4.6. List "Group Selection Regeneration" prescriptions
SELECT DISTINCT prescription AS GS_R_prescription, action_type AS final_activity, MIN(CAST(age_class as decimal)) AS min_age_class, MAX(CAST(age_class as decimal)) AS max_age_class, COUNT(action_type) AS total_rows
FROM yield_tables WHERE prescription LIKE '%\_GS\_R\_%' ESCAPE '\' GROUP BY prescription;
----------
4.7. List "Even Age Existing" prescriptions
SELECT DISTINCT prescription AS EA_E_prescription, action_type AS final_activity, MIN(CAST(age_class as decimal)) AS min_age_class, MAX(CAST(age_class as decimal)) AS max_age_class, COUNT(action_type) AS total_rows
FROM yield_tables WHERE prescription LIKE '%\_EA\_E\_%' ESCAPE '\' GROUP BY prescription;
----------
4.8. List "Even Age Regeneration" prescriptions
SELECT DISTINCT prescription AS EA_R_prescription, action_type AS final_activity, MIN(CAST(age_class as decimal)) AS min_age_class, MAX(CAST(age_class as decimal)) AS max_age_class, COUNT(action_type) AS total_rows
FROM yield_tables WHERE prescription LIKE '%\_EA\_R\_%' ESCAPE '\' GROUP BY prescription;
----------
4.9. List "Mixed Severity Fire" prescriptions
SELECT DISTINCT prescription AS MS_E_prescription, action_type AS final_activity, MIN(CAST(age_class as decimal)) AS min_age_class, MAX(CAST(age_class as decimal)) AS max_age_class, COUNT(action_type) AS total_rows
FROM yield_tables WHERE prescription LIKE '%\_MS\_E\_%' ESCAPE '\' GROUP BY prescription;
----------
4.10. List "Severe Bark Beetle" prescriptions
SELECT DISTINCT prescription AS BS_E_prescription, action_type AS final_activity, MIN(CAST(age_class as decimal)) AS min_age_class, MAX(CAST(age_class as decimal)) AS max_age_class, COUNT(action_type) AS total_rows
FROM yield_tables WHERE prescription LIKE '%\_BS\_E\_%' ESCAPE '\' GROUP BY prescription;
----------