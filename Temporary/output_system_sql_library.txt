E = Existing forest

----------
R = Regenerated forest

----------
-------------------------------------------------------LOGIC CHECK-------------------------------------------------------

----------
1.1. incomplete database records
SELECT 

DISTINCT prescription, CAST(row_id AS INTEGER) as row_id 

FROM summarize_output_05_management_details WHERE data_connection NOT LIKE 'good'

ORDER BY prescription, row_id
----------
1.2. variables associated with incomplete database records
SELECT 

CAST(iteration AS INTEGER) as iteration, var_id, var_name, CAST(var_value AS DECIMAL) as var_value, data_connection, prescription, CAST(row_id AS INTEGER) as row_id

FROM summarize_output_05_management_details WHERE data_connection NOT LIKE 'good'

ORDER BY iteration, prescription, row_id
----------
------------------------------------------------------------- AREA-------------------------------------------------------------

----------
2.1. area by iteration, period
SELECT iteration, period,
ROUND(SUM(CASE WHEN t.forest_status = 'E' THEN t.area END), 2) AS existing_forest_area,
ROUND(SUM(CASE WHEN t.forest_status = 'R' THEN t.area END), 2) AS regenerated_forest_area,
ROUND(SUM(t.area), 2) as total_area
FROM

(SELECT 
CAST(iteration AS INTEGER) AS iteration,
CAST(var_period AS INTEGER) AS period,
yield_tables.activity AS activity,
var_forest_status AS forest_status,
SUM(var_value) AS area
FROM summarize_output_05_management_details LEFT JOIN yield_tables USING (prescription, row_id)
GROUP BY iteration, period, activity, forest_status) AS t

GROUP BY iteration, period
----------
2.2. area by iteration, period, activity
SELECT iteration, period, activity,
ROUND(SUM(CASE WHEN t.forest_status = 'E' THEN t.area END), 2) AS existing_forest_area,
ROUND(SUM(CASE WHEN t.forest_status = 'R' THEN t.area END), 2) AS regenerated_forest_area,
ROUND(SUM(t.area), 2) as total_area
FROM

(SELECT 
CAST(iteration AS INTEGER) AS iteration,
CAST(var_period AS INTEGER) AS period,
yield_tables.activity AS activity,
var_forest_status AS forest_status,
SUM(var_value) AS area
FROM summarize_output_05_management_details LEFT JOIN yield_tables USING (prescription, row_id)
GROUP BY iteration, period, activity, forest_status) AS t

GROUP BY iteration, period, activity
----------
--------------------------------------------------DISTURBANCE AREA------------------------------------------------

----------
3.1. disturbance area by iteration, period
SELECT iteration, period,
ROUND(SUM(CASE WHEN t.area > 0 AND t.forest_status = 'E' THEN t.area END), 2) AS E_area,
ROUND(SUM(CASE WHEN t.area > 0 AND t.forest_status = 'R' THEN t.area END), 2) AS R_area,
ROUND(SUM(CASE WHEN t.area > 0 THEN t.area END), 2) AS total_area,
ROUND(SUM(CASE WHEN t.disturbance_area > 0 AND t.forest_status = 'E' THEN t.disturbance_area END), 2) AS E_disturbance_area,
ROUND(SUM(CASE WHEN t.disturbance_area > 0 AND t.forest_status = 'R' THEN t.disturbance_area END), 2) AS R_disturbance_area,
ROUND(SUM(CASE WHEN t.disturbance_area > 0 THEN t.disturbance_area END), 2) AS total_disturbance_area,
ROUND(100*SUM(CASE WHEN t.disturbance_area > 0 THEN t.disturbance_area END)/SUM(t.area), 2) AS disturbance_rate_for_the_total_area
FROM

(SELECT 
CAST(iteration AS INTEGER) AS iteration,
CAST(var_period AS INTEGER) AS period,
yield_tables.activity AS activity,
var_forest_status AS forest_status,
SUM(var_value) AS area,
SUM(var_value*var_loss_rate_total/100) AS disturbance_area
FROM summarize_output_05_management_details LEFT JOIN yield_tables USING  (prescription, row_id)
GROUP BY iteration, period, activity, forest_status) AS t

GROUP BY iteration, period
----------
3.2. disturbance area by iteration, period, activity
SELECT iteration, period, activity,
ROUND(SUM(CASE WHEN t.area > 0 AND t.forest_status = 'E' THEN t.area END), 2) AS E_area,
ROUND(SUM(CASE WHEN t.area > 0 AND t.forest_status = 'R' THEN t.area END), 2) AS R_area,
ROUND(SUM(CASE WHEN t.area > 0 THEN t.area END), 2) AS total_area,
ROUND(SUM(CASE WHEN t.disturbance_area > 0 AND t.forest_status = 'E' THEN t.disturbance_area END), 2) AS E_disturbance_area,
ROUND(SUM(CASE WHEN t.disturbance_area > 0 AND t.forest_status = 'R' THEN t.disturbance_area END), 2) AS R_disturbance_area,
ROUND(SUM(CASE WHEN t.disturbance_area > 0 THEN t.disturbance_area END), 2) AS total_disturbance_area,
ROUND(100*SUM(CASE WHEN t.disturbance_area > 0 THEN t.disturbance_area END)/SUM(t.area), 2) AS disturbance_rate_for_the_total_area
FROM

(SELECT 
CAST(iteration AS INTEGER) AS iteration,
CAST(var_period AS INTEGER) AS period,
yield_tables.activity AS activity,
var_forest_status AS forest_status,
SUM(var_value) AS area,
SUM(var_value*var_loss_rate_total/100) AS disturbance_area
FROM summarize_output_05_management_details LEFT JOIN yield_tables USING  (prescription, row_id)
GROUP BY iteration, period, activity, forest_status) AS t

GROUP BY iteration, period, activity
----------
-----------------------------------------VOLUME (if rmcuft column exists)-----------------------------------------

----------
4.1. harvest volume by iteration, period
SELECT iteration, period,
ROUND(SUM(CASE WHEN t.volume > 0 AND t.forest_status = 'E' THEN t.volume END), 2) AS E_harvest_volume,
ROUND(SUM(CASE WHEN t.volume > 0 AND t.forest_status = 'R' THEN t.volume END), 2) AS R_harvest_volume,
ROUND(SUM(CASE WHEN t.volume > 0 THEN t.volume END), 2) AS total_harvest_volume
FROM

(SELECT 
CAST(iteration AS INTEGER) as iteration, CAST(var_period AS INTEGER) as period, var_forest_status AS forest_status, activity AS activity, SUM(var_value*rmcuft) as volume
FROM summarize_output_05_management_details LEFT JOIN yield_tables USING  (prescription, row_id)
WHERE rmcuft > 0
GROUP BY iteration, period, activity, forest_status) AS t

GROUP BY iteration, period
----------
4.2. harvest volume by iteration, activity
SELECT iteration, activity,
ROUND(SUM(CASE WHEN t.volume > 0 AND t.forest_status = 'E' THEN t.volume END), 2) AS E_harvest_volume,
ROUND(SUM(CASE WHEN t.volume > 0 AND t.forest_status = 'R' THEN t.volume END), 2) AS R_harvest_volume,
ROUND(SUM(CASE WHEN t.volume > 0 THEN t.volume END), 2) AS total_harvest_volume
FROM

(SELECT 
CAST(iteration AS INTEGER) as iteration, CAST(var_period AS INTEGER) as period, var_forest_status AS forest_status, activity AS activity, SUM(var_value*rmcuft) as volume
FROM summarize_output_05_management_details LEFT JOIN yield_tables USING  (prescription, row_id)
WHERE rmcuft > 0
GROUP BY iteration, period, activity, forest_status) AS t

GROUP BY iteration, activity
----------
4.3. harvest volume by iteration, period, activity
SELECT iteration, period, activity,
ROUND(SUM(CASE WHEN t.volume > 0 AND t.forest_status = 'E' THEN t.volume END), 2) AS E_harvest_volume,
ROUND(SUM(CASE WHEN t.volume > 0 AND t.forest_status = 'R' THEN t.volume END), 2) AS R_harvest_volume,
ROUND(SUM(CASE WHEN t.volume > 0 THEN t.volume END), 2) AS total_harvest_volume
FROM

(SELECT 
CAST(iteration AS INTEGER) as iteration, CAST(var_period AS INTEGER) as period, var_forest_status AS forest_status, activity AS activity, SUM(var_value*rmcuft) as volume
FROM summarize_output_05_management_details LEFT JOIN yield_tables USING  (prescription, row_id)
WHERE rmcuft > 0
GROUP BY iteration, period, activity, forest_status) AS t

GROUP BY iteration, period, activity
----------
-----------------------------------------------------------ACTIVITY---------------------------------------------------------

----------
5.1. activity excluding "no-action" by iteration, period
SELECT 
iteration, var_period as period, var_layer1 as layer1, var_layer2 as layer2, var_layer3 as layer3, var_layer4 as layer4, var_layer5 as layer5, var_layer6 as layer6, var_forest_status as forest_status, age_class,
activity as activity, ROUND(var_value, 2) as area, 
ROUND(var_value*var_loss_rate_total/100, 2) as disturbance_area,
ROUND(var_value*rmcuft, 2) as harvest_volume,
ROUND(var_value*var_per_area_unit_cost, 2) as cost,
prescription, row_id

FROM summarize_output_05_management_details LEFT JOIN yield_tables USING  (prescription, row_id)

WHERE activity NOT LIKE 'no-action'
ORDER BY CAST(iteration AS INTEGER), CAST(period AS INTEGER), forest_status, layer1, layer2, layer3, layer4, layer5, layer6, CAST(age_class AS INTEGER), activity
----------
5.2. activity excluding "no-action" by iteration, period (more details)
SELECT * FROM


(
SELECT 
iteration, var_period as period, var_layer1 as layer1, var_layer2 as layer2, var_layer3 as layer3, var_layer4 as layer4, var_layer5 as layer5, var_layer6 as layer6, var_forest_status as forest_status, age_class,
activity as activity, ROUND(var_value, 2) as area, 
ROUND(var_value*var_loss_rate_total/100, 2) as disturbance_area,
ROUND(var_value*rmcuft, 2) as harvest_volume,
ROUND(var_value*var_per_area_unit_cost, 2) as cost,
prescription, row_id

FROM summarize_output_05_management_details LEFT JOIN yield_tables USING  (prescription, row_id)

WHERE activity NOT LIKE 'no-action'
ORDER BY CAST(iteration AS INTEGER), CAST(period AS INTEGER), forest_status, layer1, layer2, layer3, layer4, layer5, layer6, CAST(age_class AS INTEGER), activity
)


LEFT JOIN yield_tables USING  (prescription, row_id)
----------
------------------------------------------------------------OTHERS----------------------------------------------------------

----------
6.1. all records of the optimal solution
SELECT * FROM summarize_output_05_management_details
----------
6.2. all records of the optimal solution (more details)
SELECT *
FROM summarize_output_05_management_details LEFT JOIN yield_tables USING  (prescription, row_id)
----------
6.3. strata definition
SELECT * FROM strata_definition ORDER BY layer_id, attribute_id ASC
----------
6.4. existing strata
SELECT * FROM existing_strata ORDER BY (layer1 || layer2 || layer3 || layer4 || layer5 || layer6) ASC
----------
6.5. yield tables
SELECT * FROM yield_tables ORDER BY prescription, CAST(row_id AS INTEGER) ASC
----------