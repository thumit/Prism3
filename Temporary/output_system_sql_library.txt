---------------------------------------------------------LOGIC CHECK-----------------------------------------------------

----------
1.0. incomplete database records
SELECT 

DISTINCT prescription, CAST(row_id AS DECIMAL) as row_id 

FROM summarize_output_05_management_details WHERE data_connection NOT LIKE 'good'

ORDER BY prescription, row_id
----------
1.1. age-unmatching database records
SELECT 
DISTINCT yield_tables.prescription AS prescription, 
CAST(yield_tables.row_id AS DECIMAL) as row_id 

FROM summarize_output_05_management_details
INNER JOIN yield_tables
ON 
summarize_output_05_management_details.prescription = yield_tables.prescription 
AND 
summarize_output_05_management_details.row_id = yield_tables.row_id
AND
summarize_output_05_management_details.var_age NOT LIKE yield_tables.age_class

ORDER BY prescription, row_id
----------
1.2. variables associated with incomplete database records
SELECT 

CAST(iteration AS DECIMAL) as iteration, var_id, var_name, data_connection, prescription, CAST(row_id AS DECIMAL) as row_id

FROM summarize_output_05_management_details WHERE data_connection NOT LIKE 'good'

ORDER BY iteration, prescription, row_id
----------
1.3. variables associated with age-unmatching database records: var_age and age_class are different
SELECT 
iteration, var_id, var_name, var_age, age_class, 
yield_tables.prescription AS prescription, 
yield_tables.row_id AS row_id

FROM summarize_output_05_management_details
INNER JOIN yield_tables
ON 
summarize_output_05_management_details.prescription = yield_tables.prescription 
AND 
summarize_output_05_management_details.row_id = yield_tables.row_id
AND
summarize_output_05_management_details.var_age NOT LIKE yield_tables.age_class

ORDER BY iteration, prescription, row_id
----------
---------------------------------------------------MANAGEMENT AREA-----------------------------------------------

----------
2.0. first period management area by iteration, method
SELECT iteration,
ROUND(SUM(CASE WHEN t.method = 'NG' THEN t.grouped_area END), 1) AS NG_area,
ROUND(SUM(CASE WHEN t.method = 'PB' THEN t.grouped_area END), 1) AS PB_area,
ROUND(SUM(CASE WHEN t.method = 'GS' THEN t.grouped_area END), 1) AS GS_area,
ROUND(SUM(CASE WHEN t.method = 'EA' THEN t.grouped_area END), 1) AS EA_area,
ROUND(SUM(CASE WHEN t.method = 'MS' THEN t.grouped_area END), 1) AS MS_area,
ROUND(SUM(CASE WHEN t.method = 'BS' THEN t.grouped_area END), 1) AS BS_area
FROM


(SELECT 
CAST(iteration AS DECIMAL) as iteration,
CAST(var_period AS DECIMAL) as period,
var_method as method, SUM(var_value) as grouped_area
FROM summarize_output_05_management_details
GROUP BY iteration, period, method) AS t


WHERE period = 1
GROUP BY iteration, period
----------
2.1. first period management area by iteration, method, forest_status
SELECT iteration,
ROUND(SUM(CASE WHEN t.method_status = 'NGE' THEN t.grouped_area END), 1) AS NG_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'PBE' THEN t.grouped_area END), 1) AS PB_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'GSE' THEN t.grouped_area END), 1) AS GS_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'EAE' THEN t.grouped_area END), 1) AS EA_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'MSE' THEN t.grouped_area END), 1) AS MS_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'BSE' THEN t.grouped_area END), 1) AS BS_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'NGR' THEN t.grouped_area END), 1) AS NG_R_area,
ROUND(SUM(CASE WHEN t.method_status = 'PBR' THEN t.grouped_area END), 1) AS PB_R_area,
ROUND(SUM(CASE WHEN t.method_status = 'GSR' THEN t.grouped_area END), 1) AS GS_R_area,
ROUND(SUM(CASE WHEN t.method_status = 'EAR' THEN t.grouped_area END), 1) AS EA_R_area
FROM


(SELECT 
CAST(iteration AS DECIMAL) as iteration,
CAST(var_period AS DECIMAL) as period,
(var_method || var_forest_status) AS method_status,
SUM(var_value) as grouped_area
FROM summarize_output_05_management_details
GROUP BY iteration, period, method_status) AS t


WHERE period = 1
GROUP BY iteration, period
----------
2.2. first period management area by iteartion, method, activity
SELECT iteration, activity,
ROUND(SUM(CASE WHEN method = 'NG' THEN grouped_area END), 1) AS NG_area,
ROUND(SUM(CASE WHEN method = 'PB' THEN grouped_area END), 1) AS PB_area,
ROUND(SUM(CASE WHEN method = 'GS' THEN grouped_area END), 1) AS GS_area,
ROUND(SUM(CASE WHEN method = 'EA' THEN grouped_area END), 1) AS EA_area,
ROUND(SUM(CASE WHEN method = 'MS' THEN grouped_area END), 1) AS MS_area,
ROUND(SUM(CASE WHEN method = 'BS' THEN grouped_area END), 1) AS BS_area
FROM


(SELECT 
CAST(iteration AS DECIMAL) AS iteration, CAST(var_period AS DECIMAL) AS period, yield_tables.action_type AS activity, var_method AS method, SUM(var_value) AS grouped_area

FROM summarize_output_05_management_details
INNER JOIN yield_tables
ON 
summarize_output_05_management_details.prescription = yield_tables.prescription 
AND 
summarize_output_05_management_details.row_id = yield_tables.row_id

GROUP BY iteration, period, activity, method) AS t


WHERE period = 1
GROUP BY iteration, period, activity
----------
2.3. first period management area by iteration, method, activity, forest_status
SELECT iteration, activity,
ROUND(SUM(CASE WHEN t.method_status = 'NGE' THEN t.grouped_area END), 1) AS NG_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'PBE' THEN t.grouped_area END), 1) AS PB_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'GSE' THEN t.grouped_area END), 1) AS GS_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'EAE' THEN t.grouped_area END), 1) AS EA_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'MSE' THEN t.grouped_area END), 1) AS MS_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'BSE' THEN t.grouped_area END), 1) AS BS_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'NGR' THEN t.grouped_area END), 1) AS NG_R_area,
ROUND(SUM(CASE WHEN t.method_status = 'PBR' THEN t.grouped_area END), 1) AS PB_R_area,
ROUND(SUM(CASE WHEN t.method_status = 'GSR' THEN t.grouped_area END), 1) AS GS_R_area,
ROUND(SUM(CASE WHEN t.method_status = 'EAR' THEN t.grouped_area END), 1) AS EA_R_area
FROM


(SELECT 
CAST(iteration AS DECIMAL) AS iteration, CAST(var_period AS DECIMAL) AS period, yield_tables.action_type AS activity, (var_method || var_forest_status) AS method_status, SUM(var_value) AS grouped_area

FROM summarize_output_05_management_details
INNER JOIN yield_tables
ON 
summarize_output_05_management_details.prescription = yield_tables.prescription 
AND 
summarize_output_05_management_details.row_id = yield_tables.row_id

GROUP BY iteration, period, activity, method_status) AS t


WHERE period = 1
GROUP BY iteration, period, activity
----------
2.4. management area by iteration, period, method
SELECT iteration, period,
ROUND(SUM(CASE WHEN t.method = 'NG' THEN t.grouped_area END), 1) AS NG_area,
ROUND(SUM(CASE WHEN t.method = 'PB' THEN t.grouped_area END), 1) AS PB_area,
ROUND(SUM(CASE WHEN t.method = 'GS' THEN t.grouped_area END), 1) AS GS_area,
ROUND(SUM(CASE WHEN t.method = 'EA' THEN t.grouped_area END), 1) AS EA_area,
ROUND(SUM(CASE WHEN t.method = 'MS' THEN t.grouped_area END), 1) AS MS_area,
ROUND(SUM(CASE WHEN t.method = 'BS' THEN t.grouped_area END), 1) AS BS_area
FROM


(SELECT 
CAST(iteration AS DECIMAL) as iteration,
CAST(var_period AS DECIMAL) as period,
var_method as method, SUM(var_value) as grouped_area
FROM summarize_output_05_management_details
GROUP BY iteration, period, method) AS t


GROUP BY iteration, period
----------
2.5. management area by iteration, period, method, forest_status
SELECT iteration, period,
ROUND(SUM(CASE WHEN t.method_status = 'NGE' THEN t.grouped_area END), 1) AS NG_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'PBE' THEN t.grouped_area END), 1) AS PB_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'GSE' THEN t.grouped_area END), 1) AS GS_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'EAE' THEN t.grouped_area END), 1) AS EA_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'MSE' THEN t.grouped_area END), 1) AS MS_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'BSE' THEN t.grouped_area END), 1) AS BS_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'NGR' THEN t.grouped_area END), 1) AS NG_R_area,
ROUND(SUM(CASE WHEN t.method_status = 'PBR' THEN t.grouped_area END), 1) AS PB_R_area,
ROUND(SUM(CASE WHEN t.method_status = 'GSR' THEN t.grouped_area END), 1) AS GS_R_area,
ROUND(SUM(CASE WHEN t.method_status = 'EAR' THEN t.grouped_area END), 1) AS EA_R_area
FROM


(SELECT 
CAST(iteration AS DECIMAL) AS iteration,
CAST(var_period AS DECIMAL) AS period,
(var_method || var_forest_status) AS method_status,
SUM(var_value) AS grouped_area
FROM summarize_output_05_management_details
GROUP BY iteration, period, method_status) AS t


GROUP BY iteration, period
----------
2.6. management area by iteartion, period, method, activity
SELECT iteration, period, activity,
ROUND(SUM(CASE WHEN method = 'NG' THEN grouped_area END), 1) AS NG_area,
ROUND(SUM(CASE WHEN method = 'PB' THEN grouped_area END), 1) AS PB_area,
ROUND(SUM(CASE WHEN method = 'GS' THEN grouped_area END), 1) AS GS_area,
ROUND(SUM(CASE WHEN method = 'EA' THEN grouped_area END), 1) AS EA_area,
ROUND(SUM(CASE WHEN method = 'MS' THEN grouped_area END), 1) AS MS_area,
ROUND(SUM(CASE WHEN method = 'BS' THEN grouped_area END), 1) AS BS_area
FROM


(SELECT 
CAST(iteration AS DECIMAL) AS iteration, CAST(var_period AS DECIMAL) AS period, yield_tables.action_type AS activity, var_method AS method, SUM(var_value) AS grouped_area

FROM summarize_output_05_management_details
INNER JOIN yield_tables
ON 
summarize_output_05_management_details.prescription = yield_tables.prescription 
AND 
summarize_output_05_management_details.row_id = yield_tables.row_id

GROUP BY iteration, period, activity, method) AS t


GROUP BY iteration, period, activity
----------
2.7. management area by iteration, period, method, activity, forest_status
SELECT iteration, period, activity,
ROUND(SUM(CASE WHEN t.method_status = 'NGE' THEN t.grouped_area END), 1) AS NG_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'PBE' THEN t.grouped_area END), 1) AS PB_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'GSE' THEN t.grouped_area END), 1) AS GS_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'EAE' THEN t.grouped_area END), 1) AS EA_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'MSE' THEN t.grouped_area END), 1) AS MS_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'BSE' THEN t.grouped_area END), 1) AS BS_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'NGR' THEN t.grouped_area END), 1) AS NG_R_area,
ROUND(SUM(CASE WHEN t.method_status = 'PBR' THEN t.grouped_area END), 1) AS PB_R_area,
ROUND(SUM(CASE WHEN t.method_status = 'GSR' THEN t.grouped_area END), 1) AS GS_R_area,
ROUND(SUM(CASE WHEN t.method_status = 'EAR' THEN t.grouped_area END), 1) AS EA_R_area
FROM


(SELECT 
CAST(iteration AS DECIMAL) AS iteration, CAST(var_period AS DECIMAL) AS period, yield_tables.action_type AS activity, (var_method || var_forest_status) AS method_status, SUM(var_value) AS grouped_area

FROM summarize_output_05_management_details
INNER JOIN yield_tables
ON 
summarize_output_05_management_details.prescription = yield_tables.prescription 
AND 
summarize_output_05_management_details.row_id = yield_tables.row_id

GROUP BY iteration, period, activity, method_status) AS t


GROUP BY iteration, period, activity
----------
--------------------------------------------------DISTURBANCE AREA------------------------------------------------

----------
3.0. first period disturbance area by iteration, method
SELECT iteration,
ROUND(SUM(CASE WHEN t.method = 'NG' THEN t.grouped_area END), 1) AS NG_area,
ROUND(SUM(CASE WHEN t.method = 'PB' THEN t.grouped_area END), 1) AS PB_area,
ROUND(SUM(CASE WHEN t.method = 'GS' THEN t.grouped_area END), 1) AS GS_area,
ROUND(SUM(CASE WHEN t.method = 'EA' THEN t.grouped_area END), 1) AS EA_area,
ROUND(SUM(CASE WHEN t.method = 'MS' THEN t.grouped_area END), 1) AS MS_area,
ROUND(SUM(CASE WHEN t.method = 'BS' THEN t.grouped_area END), 1) AS BS_area
FROM


(SELECT 
CAST(iteration AS DECIMAL) as iteration,
CAST(var_period AS DECIMAL) as period,
var_method as method, SUM(var_value*loss_rate_total/100) as grouped_area
FROM summarize_output_05_management_details
GROUP BY iteration, period, method
HAVING grouped_area > 0) AS t


WHERE period = 1
GROUP BY iteration, period
----------
3.1. first period disturbance area by iteration, method, forest_status
SELECT iteration,
ROUND(SUM(CASE WHEN t.method_status = 'NGE' THEN t.grouped_area END), 1) AS NG_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'PBE' THEN t.grouped_area END), 1) AS PB_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'GSE' THEN t.grouped_area END), 1) AS GS_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'EAE' THEN t.grouped_area END), 1) AS EA_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'MSE' THEN t.grouped_area END), 1) AS MS_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'BSE' THEN t.grouped_area END), 1) AS BS_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'NGR' THEN t.grouped_area END), 1) AS NG_R_area,
ROUND(SUM(CASE WHEN t.method_status = 'PBR' THEN t.grouped_area END), 1) AS PB_R_area,
ROUND(SUM(CASE WHEN t.method_status = 'GSR' THEN t.grouped_area END), 1) AS GS_R_area,
ROUND(SUM(CASE WHEN t.method_status = 'EAR' THEN t.grouped_area END), 1) AS EA_R_area
FROM


(SELECT 
CAST(iteration AS DECIMAL) as iteration,
CAST(var_period AS DECIMAL) as period,
(var_method || var_forest_status) AS method_status,
SUM(var_value*loss_rate_total/100) as grouped_area
FROM summarize_output_05_management_details
GROUP BY iteration, period, method_status
HAVING grouped_area > 0) AS t


WHERE period = 1
GROUP BY iteration, period
----------
3.2. first period disturbance area by iteartion, method, activity
SELECT iteration, activity,
ROUND(SUM(CASE WHEN method = 'NG' THEN grouped_area END), 1) AS NG_area,
ROUND(SUM(CASE WHEN method = 'PB' THEN grouped_area END), 1) AS PB_area,
ROUND(SUM(CASE WHEN method = 'GS' THEN grouped_area END), 1) AS GS_area,
ROUND(SUM(CASE WHEN method = 'EA' THEN grouped_area END), 1) AS EA_area,
ROUND(SUM(CASE WHEN method = 'MS' THEN grouped_area END), 1) AS MS_area,
ROUND(SUM(CASE WHEN method = 'BS' THEN grouped_area END), 1) AS BS_area
FROM


(SELECT 
CAST(iteration AS DECIMAL) AS iteration, CAST(var_period AS DECIMAL) AS period, yield_tables.action_type AS activity, var_method AS method, SUM(var_value*loss_rate_total/100) AS grouped_area

FROM summarize_output_05_management_details
INNER JOIN yield_tables
ON 
summarize_output_05_management_details.prescription = yield_tables.prescription 
AND 
summarize_output_05_management_details.row_id = yield_tables.row_id

GROUP BY iteration, period, activity, method
HAVING grouped_area > 0) AS t


WHERE period = 1
GROUP BY iteration, period, activity
----------
3.3. first period disturbance area by iteration, method, activity, forest_status
SELECT iteration, activity,
ROUND(SUM(CASE WHEN t.method_status = 'NGE' THEN t.grouped_area END), 1) AS NG_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'PBE' THEN t.grouped_area END), 1) AS PB_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'GSE' THEN t.grouped_area END), 1) AS GS_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'EAE' THEN t.grouped_area END), 1) AS EA_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'MSE' THEN t.grouped_area END), 1) AS MS_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'BSE' THEN t.grouped_area END), 1) AS BS_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'NGR' THEN t.grouped_area END), 1) AS NG_R_area,
ROUND(SUM(CASE WHEN t.method_status = 'PBR' THEN t.grouped_area END), 1) AS PB_R_area,
ROUND(SUM(CASE WHEN t.method_status = 'GSR' THEN t.grouped_area END), 1) AS GS_R_area,
ROUND(SUM(CASE WHEN t.method_status = 'EAR' THEN t.grouped_area END), 1) AS EA_R_area
FROM


(SELECT 
CAST(iteration AS DECIMAL) AS iteration, CAST(var_period AS DECIMAL) AS period, yield_tables.action_type AS activity, (var_method || var_forest_status) AS method_status, SUM(var_value*loss_rate_total/100) AS grouped_area

FROM summarize_output_05_management_details
INNER JOIN yield_tables
ON 
summarize_output_05_management_details.prescription = yield_tables.prescription 
AND 
summarize_output_05_management_details.row_id = yield_tables.row_id

GROUP BY iteration, period, activity, method_status
HAVING grouped_area > 0) AS t


WHERE period = 1
GROUP BY iteration, period, activity
----------
3.4. disturbance area by iteration, period, method
SELECT iteration, period,
ROUND(SUM(CASE WHEN t.method = 'NG' THEN t.grouped_area END), 1) AS NG_area,
ROUND(SUM(CASE WHEN t.method = 'PB' THEN t.grouped_area END), 1) AS PB_area,
ROUND(SUM(CASE WHEN t.method = 'GS' THEN t.grouped_area END), 1) AS GS_area,
ROUND(SUM(CASE WHEN t.method = 'EA' THEN t.grouped_area END), 1) AS EA_area,
ROUND(SUM(CASE WHEN t.method = 'MS' THEN t.grouped_area END), 1) AS MS_area,
ROUND(SUM(CASE WHEN t.method = 'BS' THEN t.grouped_area END), 1) AS BS_area
FROM


(SELECT 
CAST(iteration AS DECIMAL) as iteration,
CAST(var_period AS DECIMAL) as period,
var_method as method, SUM(var_value*loss_rate_total/100) as grouped_area
FROM summarize_output_05_management_details
GROUP BY iteration, period, method
HAVING grouped_area > 0) AS t


GROUP BY iteration, period
----------
3.5. disturbance area by iteration, period, method, forest_status
SELECT iteration, period,
ROUND(SUM(CASE WHEN t.method_status = 'NGE' THEN t.grouped_area END), 1) AS NG_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'PBE' THEN t.grouped_area END), 1) AS PB_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'GSE' THEN t.grouped_area END), 1) AS GS_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'EAE' THEN t.grouped_area END), 1) AS EA_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'MSE' THEN t.grouped_area END), 1) AS MS_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'BSE' THEN t.grouped_area END), 1) AS BS_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'NGR' THEN t.grouped_area END), 1) AS NG_R_area,
ROUND(SUM(CASE WHEN t.method_status = 'PBR' THEN t.grouped_area END), 1) AS PB_R_area,
ROUND(SUM(CASE WHEN t.method_status = 'GSR' THEN t.grouped_area END), 1) AS GS_R_area,
ROUND(SUM(CASE WHEN t.method_status = 'EAR' THEN t.grouped_area END), 1) AS EA_R_area
FROM


(SELECT 
CAST(iteration AS DECIMAL) AS iteration,
CAST(var_period AS DECIMAL) AS period,
(var_method || var_forest_status) AS method_status,
SUM(var_value*loss_rate_total/100) AS grouped_area
FROM summarize_output_05_management_details
GROUP BY iteration, period, method_status
HAVING grouped_area > 0) AS t


GROUP BY iteration, period
----------
3.6. disturbance area by iteartion, period, method, activity
SELECT iteration, period, activity,
ROUND(SUM(CASE WHEN method = 'NG' THEN grouped_area END), 1) AS NG_area,
ROUND(SUM(CASE WHEN method = 'PB' THEN grouped_area END), 1) AS PB_area,
ROUND(SUM(CASE WHEN method = 'GS' THEN grouped_area END), 1) AS GS_area,
ROUND(SUM(CASE WHEN method = 'EA' THEN grouped_area END), 1) AS EA_area,
ROUND(SUM(CASE WHEN method = 'MS' THEN grouped_area END), 1) AS MS_area,
ROUND(SUM(CASE WHEN method = 'BS' THEN grouped_area END), 1) AS BS_area
FROM


(SELECT 
CAST(iteration AS DECIMAL) AS iteration, CAST(var_period AS DECIMAL) AS period, yield_tables.action_type AS activity, var_method AS method, SUM(var_value*loss_rate_total/100) AS grouped_area

FROM summarize_output_05_management_details
INNER JOIN yield_tables
ON 
summarize_output_05_management_details.prescription = yield_tables.prescription 
AND 
summarize_output_05_management_details.row_id = yield_tables.row_id

GROUP BY iteration, period, activity, method
HAVING grouped_area > 0) AS t


GROUP BY iteration, period, activity
----------
3.7. disturbance area by iteration, period, method, activity, forest_status
SELECT iteration, period, activity,
ROUND(SUM(CASE WHEN t.method_status = 'NGE' THEN t.grouped_area END), 1) AS NG_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'PBE' THEN t.grouped_area END), 1) AS PB_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'GSE' THEN t.grouped_area END), 1) AS GS_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'EAE' THEN t.grouped_area END), 1) AS EA_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'MSE' THEN t.grouped_area END), 1) AS MS_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'BSE' THEN t.grouped_area END), 1) AS BS_E_area,
ROUND(SUM(CASE WHEN t.method_status = 'NGR' THEN t.grouped_area END), 1) AS NG_R_area,
ROUND(SUM(CASE WHEN t.method_status = 'PBR' THEN t.grouped_area END), 1) AS PB_R_area,
ROUND(SUM(CASE WHEN t.method_status = 'GSR' THEN t.grouped_area END), 1) AS GS_R_area,
ROUND(SUM(CASE WHEN t.method_status = 'EAR' THEN t.grouped_area END), 1) AS EA_R_area
FROM


(SELECT 
CAST(iteration AS DECIMAL) AS iteration, CAST(var_period AS DECIMAL) AS period, yield_tables.action_type AS activity, (var_method || var_forest_status) AS method_status, SUM(var_value*loss_rate_total/100) AS grouped_area

FROM summarize_output_05_management_details
INNER JOIN yield_tables
ON 
summarize_output_05_management_details.prescription = yield_tables.prescription 
AND 
summarize_output_05_management_details.row_id = yield_tables.row_id

GROUP BY iteration, period, activity, method_status
HAVING grouped_area > 0) AS t


GROUP BY iteration, period, activity
----------
-----------------------------------------VOLUME (if rmcuft column exists)-----------------------------------------

----------
4.0. first period harvested volume by iteration, method
SELECT iteration, period,
ROUND(SUM(CASE WHEN t.method = 'NG' AND t.volume > 0 THEN t.volume END), 1) AS NG_volume,
ROUND(SUM(CASE WHEN t.method = 'PB' AND t.volume > 0 THEN t.volume  END), 1) AS PB_volume,
ROUND(SUM(CASE WHEN t.method = 'GS' AND t.volume > 0 THEN t.volume  END), 1) AS GS_volume,
ROUND(SUM(CASE WHEN t.method = 'EA' AND t.volume > 0 THEN t.volume  END), 1) AS EA_volume,
ROUND(SUM(CASE WHEN t.method = 'MS' AND t.volume > 0 THEN t.volume  END), 1) AS MS_volume,
ROUND(SUM(CASE WHEN t.method = 'BS' AND t.volume > 0 THEN t.volume  END), 1) AS BS_volume,
ROUND(SUM(CASE WHEN t.volume > 0 THEN t.volume  END), 1) AS total_volume
FROM


(SELECT 
CAST(iteration AS DECIMAL) as iteration,
CAST(var_period AS DECIMAL) as period,
var_method as method, 
SUM(var_value*rmcuft) as volume

FROM summarize_output_05_management_details
INNER JOIN yield_tables
ON 
summarize_output_05_management_details.prescription = yield_tables.prescription 
AND 
summarize_output_05_management_details.row_id = yield_tables.row_id

GROUP BY iteration, period, method) AS t


WHERE period = 1
GROUP BY iteration, period
----------
4.1. first period harvested volume by iteration, method, forest_status
SELECT iteration, period,
ROUND(SUM(CASE WHEN t.method_status = 'NGE' AND t.volume > 0 THEN t.volume END), 1) AS NG_E_volume,
ROUND(SUM(CASE WHEN t.method_status = 'PBE' AND t.volume > 0 THEN t.volume END), 1) AS PB_E_volume,
ROUND(SUM(CASE WHEN t.method_status = 'GSE' AND t.volume > 0 THEN t.volume END), 1) AS GS_E_volume,
ROUND(SUM(CASE WHEN t.method_status = 'EAE' AND t.volume > 0 THEN t.volume END), 1) AS EA_E_volume,
ROUND(SUM(CASE WHEN t.method_status = 'MSE' AND t.volume > 0 THEN t.volume END), 1) AS MS_E_volume,
ROUND(SUM(CASE WHEN t.method_status = 'BSE' AND t.volume > 0 THEN t.volume END), 1) AS BS_E_volume,
ROUND(SUM(CASE WHEN t.method_status = 'NGR' AND t.volume > 0 THEN t.volume END), 1) AS NG_R_volume,
ROUND(SUM(CASE WHEN t.method_status = 'PBR' AND t.volume > 0 THEN t.volume END), 1) AS PB_R_volume,
ROUND(SUM(CASE WHEN t.method_status = 'GSR' AND t.volume > 0 THEN t.volume END), 1) AS GS_R_volume,
ROUND(SUM(CASE WHEN t.method_status = 'EAR' AND t.volume > 0 THEN t.volume END), 1) AS EA_R_volume,
ROUND(SUM(CASE WHEN t.volume > 0 THEN t.volume  END), 1) AS total_volume
FROM


(SELECT 
CAST(iteration AS DECIMAL) as iteration,
CAST(var_period AS DECIMAL) as period,
(var_method || var_forest_status) AS method_status,
SUM(var_value*rmcuft) as volume

FROM summarize_output_05_management_details
INNER JOIN yield_tables
ON 
summarize_output_05_management_details.prescription = yield_tables.prescription 
AND 
summarize_output_05_management_details.row_id = yield_tables.row_id

GROUP BY iteration, (period || method_status)
) AS t


WHERE period = 1
GROUP BY iteration, period
----------
4.2. first period harvested volume by iteration, method, activity
SELECT iteration, period, activity,
ROUND(SUM(CASE WHEN t.method = 'NG' AND t.volume > 0 THEN t.volume END), 1) AS NG_volume,
ROUND(SUM(CASE WHEN t.method = 'PB' AND t.volume > 0 THEN t.volume  END), 1) AS PB_volume,
ROUND(SUM(CASE WHEN t.method = 'GS' AND t.volume > 0 THEN t.volume  END), 1) AS GS_volume,
ROUND(SUM(CASE WHEN t.method = 'EA' AND t.volume > 0 THEN t.volume  END), 1) AS EA_volume,
ROUND(SUM(CASE WHEN t.method = 'MS' AND t.volume > 0 THEN t.volume  END), 1) AS MS_volume,
ROUND(SUM(CASE WHEN t.method = 'BS' AND t.volume > 0 THEN t.volume  END), 1) AS BS_volume,
ROUND(SUM(CASE WHEN t.volume > 0 THEN t.volume  END), 1) AS total_volume
FROM


(SELECT 
CAST(iteration AS DECIMAL) AS iteration, CAST(var_period AS DECIMAL) AS period, yield_tables.action_type AS activity, var_method AS method, SUM(var_value*rmcuft) AS volume

FROM summarize_output_05_management_details
INNER JOIN yield_tables
ON 
summarize_output_05_management_details.prescription = yield_tables.prescription 
AND 
summarize_output_05_management_details.row_id = yield_tables.row_id

GROUP BY iteration, period, activity, method
HAVING volume > 0) AS t


WHERE period = 1
GROUP BY iteration, period, activity
----------
4.3. first period harvested volume by iteration, method, activity, forest_status
SELECT iteration, period, activity,
ROUND(SUM(CASE WHEN t.method_status = 'NGE' AND t.volume > 0 THEN t.volume END), 1) AS NG_E_volume,
ROUND(SUM(CASE WHEN t.method_status = 'PBE' AND t.volume > 0 THEN t.volume END), 1) AS PB_E_volume,
ROUND(SUM(CASE WHEN t.method_status = 'GSE' AND t.volume > 0 THEN t.volume END), 1) AS GS_E_volume,
ROUND(SUM(CASE WHEN t.method_status = 'EAE' AND t.volume > 0 THEN t.volume END), 1) AS EA_E_volume,
ROUND(SUM(CASE WHEN t.method_status = 'MSE' AND t.volume > 0 THEN t.volume END), 1) AS MS_E_volume,
ROUND(SUM(CASE WHEN t.method_status = 'BSE' AND t.volume > 0 THEN t.volume END), 1) AS BS_E_volume,
ROUND(SUM(CASE WHEN t.method_status = 'NGR' AND t.volume > 0 THEN t.volume END), 1) AS NG_R_volume,
ROUND(SUM(CASE WHEN t.method_status = 'PBR' AND t.volume > 0 THEN t.volume END), 1) AS PB_R_volume,
ROUND(SUM(CASE WHEN t.method_status = 'GSR' AND t.volume > 0 THEN t.volume END), 1) AS GS_R_volume,
ROUND(SUM(CASE WHEN t.method_status = 'EAR' AND t.volume > 0 THEN t.volume END), 1) AS EA_R_volume,
ROUND(SUM(CASE WHEN t.volume > 0 THEN t.volume  END), 1) AS total_volume
FROM


(SELECT 
CAST(iteration AS DECIMAL) AS iteration, CAST(var_period AS DECIMAL) AS period, yield_tables.action_type AS activity, (var_method || var_forest_status) AS method_status, SUM(var_value*rmcuft) AS volume

FROM summarize_output_05_management_details
INNER JOIN yield_tables
ON 
summarize_output_05_management_details.prescription = yield_tables.prescription 
AND 
summarize_output_05_management_details.row_id = yield_tables.row_id

GROUP BY iteration, period, activity, method_status
HAVING volume > 0) AS t


WHERE period = 1
GROUP BY iteration, period, activity
----------
4.4. harvested volume by iteration, period, method
SELECT iteration, period,
ROUND(SUM(CASE WHEN t.method = 'NG' AND t.volume > 0 THEN t.volume END), 1) AS NG_volume,
ROUND(SUM(CASE WHEN t.method = 'PB' AND t.volume > 0 THEN t.volume  END), 1) AS PB_volume,
ROUND(SUM(CASE WHEN t.method = 'GS' AND t.volume > 0 THEN t.volume  END), 1) AS GS_volume,
ROUND(SUM(CASE WHEN t.method = 'EA' AND t.volume > 0 THEN t.volume  END), 1) AS EA_volume,
ROUND(SUM(CASE WHEN t.method = 'MS' AND t.volume > 0 THEN t.volume  END), 1) AS MS_volume,
ROUND(SUM(CASE WHEN t.method = 'BS' AND t.volume > 0 THEN t.volume  END), 1) AS BS_volume,
ROUND(SUM(CASE WHEN t.volume > 0 THEN t.volume  END), 1) AS total_volume
FROM


(SELECT 
CAST(iteration AS DECIMAL) as iteration,
CAST(var_period AS DECIMAL) as period,
var_method as method, 
SUM(var_value*rmcuft) as volume

FROM summarize_output_05_management_details
INNER JOIN yield_tables
ON 
summarize_output_05_management_details.prescription = yield_tables.prescription 
AND 
summarize_output_05_management_details.row_id = yield_tables.row_id

GROUP BY iteration, period, method) AS t


GROUP BY iteration, period
----------
4.5. harvested volume by iteration, period, method, forest_status
SELECT iteration, period,
ROUND(SUM(CASE WHEN t.method_status = 'NGE' AND t.volume > 0 THEN t.volume END), 1) AS NG_E_volume,
ROUND(SUM(CASE WHEN t.method_status = 'PBE' AND t.volume > 0 THEN t.volume END), 1) AS PB_E_volume,
ROUND(SUM(CASE WHEN t.method_status = 'GSE' AND t.volume > 0 THEN t.volume END), 1) AS GS_E_volume,
ROUND(SUM(CASE WHEN t.method_status = 'EAE' AND t.volume > 0 THEN t.volume END), 1) AS EA_E_volume,
ROUND(SUM(CASE WHEN t.method_status = 'MSE' AND t.volume > 0 THEN t.volume END), 1) AS MS_E_volume,
ROUND(SUM(CASE WHEN t.method_status = 'BSE' AND t.volume > 0 THEN t.volume END), 1) AS BS_E_volume,
ROUND(SUM(CASE WHEN t.method_status = 'NGR' AND t.volume > 0 THEN t.volume END), 1) AS NG_R_volume,
ROUND(SUM(CASE WHEN t.method_status = 'PBR' AND t.volume > 0 THEN t.volume END), 1) AS PB_R_volume,
ROUND(SUM(CASE WHEN t.method_status = 'GSR' AND t.volume > 0 THEN t.volume END), 1) AS GS_R_volume,
ROUND(SUM(CASE WHEN t.method_status = 'EAR' AND t.volume > 0 THEN t.volume END), 1) AS EA_R_volume,
ROUND(SUM(CASE WHEN t.volume > 0 THEN t.volume  END), 1) AS total_volume
FROM


(SELECT 
CAST(iteration AS DECIMAL) as iteration,
CAST(var_period AS DECIMAL) as period,
(var_method || var_forest_status) AS method_status,
SUM(var_value*rmcuft) as volume

FROM summarize_output_05_management_details
INNER JOIN yield_tables
ON 
summarize_output_05_management_details.prescription = yield_tables.prescription 
AND 
summarize_output_05_management_details.row_id = yield_tables.row_id

GROUP BY iteration, (period || method_status)
) AS t


GROUP BY iteration, period
----------
4.6. harvested volume by iteration, period, method, activity
SELECT iteration, period, activity,
ROUND(SUM(CASE WHEN t.method = 'NG' AND t.volume > 0 THEN t.volume END), 1) AS NG_volume,
ROUND(SUM(CASE WHEN t.method = 'PB' AND t.volume > 0 THEN t.volume  END), 1) AS PB_volume,
ROUND(SUM(CASE WHEN t.method = 'GS' AND t.volume > 0 THEN t.volume  END), 1) AS GS_volume,
ROUND(SUM(CASE WHEN t.method = 'EA' AND t.volume > 0 THEN t.volume  END), 1) AS EA_volume,
ROUND(SUM(CASE WHEN t.method = 'MS' AND t.volume > 0 THEN t.volume  END), 1) AS MS_volume,
ROUND(SUM(CASE WHEN t.method = 'BS' AND t.volume > 0 THEN t.volume  END), 1) AS BS_volume,
ROUND(SUM(CASE WHEN t.volume > 0 THEN t.volume  END), 1) AS total_volume
FROM


(SELECT 
CAST(iteration AS DECIMAL) AS iteration, CAST(var_period AS DECIMAL) AS period, yield_tables.action_type AS activity, var_method AS method, SUM(var_value*rmcuft) AS volume

FROM summarize_output_05_management_details
INNER JOIN yield_tables
ON 
summarize_output_05_management_details.prescription = yield_tables.prescription 
AND 
summarize_output_05_management_details.row_id = yield_tables.row_id

GROUP BY iteration, period, activity, method
HAVING volume > 0) AS t


GROUP BY iteration, period, activity
----------
4.7. harvested volume by iteration, period, method, activity, forest_status
SELECT iteration, period, activity,
ROUND(SUM(CASE WHEN t.method_status = 'NGE' AND t.volume > 0 THEN t.volume END), 1) AS NG_E_volume,
ROUND(SUM(CASE WHEN t.method_status = 'PBE' AND t.volume > 0 THEN t.volume END), 1) AS PB_E_volume,
ROUND(SUM(CASE WHEN t.method_status = 'GSE' AND t.volume > 0 THEN t.volume END), 1) AS GS_E_volume,
ROUND(SUM(CASE WHEN t.method_status = 'EAE' AND t.volume > 0 THEN t.volume END), 1) AS EA_E_volume,
ROUND(SUM(CASE WHEN t.method_status = 'MSE' AND t.volume > 0 THEN t.volume END), 1) AS MS_E_volume,
ROUND(SUM(CASE WHEN t.method_status = 'BSE' AND t.volume > 0 THEN t.volume END), 1) AS BS_E_volume,
ROUND(SUM(CASE WHEN t.method_status = 'NGR' AND t.volume > 0 THEN t.volume END), 1) AS NG_R_volume,
ROUND(SUM(CASE WHEN t.method_status = 'PBR' AND t.volume > 0 THEN t.volume END), 1) AS PB_R_volume,
ROUND(SUM(CASE WHEN t.method_status = 'GSR' AND t.volume > 0 THEN t.volume END), 1) AS GS_R_volume,
ROUND(SUM(CASE WHEN t.method_status = 'EAR' AND t.volume > 0 THEN t.volume END), 1) AS EA_R_volume,
ROUND(SUM(CASE WHEN t.volume > 0 THEN t.volume  END), 1) AS total_volume
FROM


(SELECT 
CAST(iteration AS DECIMAL) AS iteration, CAST(var_period AS DECIMAL) AS period, yield_tables.action_type AS activity, (var_method || var_forest_status) AS method_status, SUM(var_value*rmcuft) AS volume

FROM summarize_output_05_management_details
INNER JOIN yield_tables
ON 
summarize_output_05_management_details.prescription = yield_tables.prescription 
AND 
summarize_output_05_management_details.row_id = yield_tables.row_id

GROUP BY iteration, period, activity, method_status
HAVING volume > 0) AS t


GROUP BY iteration, period, activity
----------
-----------------------------------------------------------ACTIVITY---------------------------------------------------------

----------
5.0. first period positive activity (excluding "no-action", full details)
SELECT *

FROM summarize_output_05_management_details
INNER JOIN yield_tables
ON 
summarize_output_05_management_details.prescription = yield_tables.prescription 
AND 
summarize_output_05_management_details.row_id = yield_tables.row_id

WHERE action_type NOT LIKE 'no-action' AND var_period = 1
ORDER BY CAST(iteration AS DECIMAL), CAST(var_id AS DECIMAL)
----------
5.1. fisrt period positive activity (excluding "no-action", less details)
SELECT 
iteration, var_layer1 as layer1, var_layer2 as layer2, var_layer3 as layer3, var_layer4 as layer4,var_layer5 as layer5, var_layer6 as layer6, var_forest_status as forest_status, yield_tables.age_class as forest_age_class,
yield_tables.prescription, yield_tables.row_id, var_method as method, action_type as activity, ROUND(var_value, 1) as management_area, 
ROUND(var_value*loss_rate_total/100, 1) as disturbance_area,
ROUND(var_value*rmcuft, 1) as harvest_volume,
ROUND(var_value*var_unit_management_cost, 1) as total_cost

FROM summarize_output_05_management_details
INNER JOIN yield_tables
ON 
summarize_output_05_management_details.prescription = yield_tables.prescription 
AND 
summarize_output_05_management_details.row_id = yield_tables.row_id

WHERE action_type NOT LIKE 'no-action' AND var_period = 1
ORDER BY CAST(iteration AS DECIMAL), forest_status, layer1, layer2, layer3, layer4, layer5, layer6, CAST(forest_age_class AS DECIMAL), method, activity
----------
5.2. positive activity (excluding "no-action", full details)
SELECT *

FROM summarize_output_05_management_details
INNER JOIN yield_tables
ON 
summarize_output_05_management_details.prescription = yield_tables.prescription 
AND 
summarize_output_05_management_details.row_id = yield_tables.row_id

WHERE action_type NOT LIKE 'no-action'
ORDER BY CAST(iteration AS DECIMAL), CAST(var_id AS DECIMAL)
----------
5.3. positive activity (excluding "no-action", less details)
SELECT 
iteration, var_layer1 as layer1, var_layer2 as layer2, var_layer3 as layer3, var_layer4 as layer4,var_layer5 as layer5, var_layer6 as layer6, var_forest_status as forest_status, yield_tables.age_class as forest_age_class,
yield_tables.prescription, yield_tables.row_id, var_period as period, var_method as method, action_type as activity, ROUND(var_value, 1) as management_area, 
ROUND(var_value*loss_rate_total/100, 1) as disturbance_area,
ROUND(var_value*rmcuft, 1) as harvest_volume,
ROUND(var_value*var_unit_management_cost, 1) as total_cost

FROM summarize_output_05_management_details
INNER JOIN yield_tables
ON 
summarize_output_05_management_details.prescription = yield_tables.prescription 
AND 
summarize_output_05_management_details.row_id = yield_tables.row_id

WHERE action_type NOT LIKE 'no-action'
ORDER BY CAST(iteration AS DECIMAL), CAST(period AS DECIMAL), forest_status, layer1, layer2, layer3, layer4, layer5, layer6, CAST(forest_age_class AS DECIMAL), method, activity
----------